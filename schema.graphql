schema {
  query: Query
  mutation: Mutation
}

type GlacierUsers {
  email: String
  extension_voiceserver: String
  first_name: String
  glacierpwd: String
  last_name: String
  messenger_id: String
  organization: String!
  securityInfo: [AWSJSON]
  selected_twilionumber: [AWSJSON]
  user_name: String
  username: String!
}

type Mutation {
  createGlacierUsers(input: CreateGlacierUsersInput!): GlacierUsers
  updateGlacierUsers(input: UpdateGlacierUsersInput!): GlacierUsers
}

type Query {
  getGlacierUsers(organization: String!, username: String!): GlacierUsers
}

input CreateGlacierUsersInput {
  email: String
  extension_voiceserver: String
  first_name: String
  glacierpwd: String
  last_name: String
  messenger_id: String
  organization: String!
  securityInfo: [AWSJSON]
  user_name: String
  username: String!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateGlacierUsersInput {
  email: String
  extension_voiceserver: String
  first_name: String
  glacierpwd: String
  last_name: String
  messenger_id: String
  organization: String!
  securityInfo: [AWSJSON]
  user_name: String
  username: String!
}
